{
    "title": "",
    "metadata": {
        "author": "Lukas Semecky",
        "creation_date": "2024-04-18 12:18:00",
        "version": ""
    },
    "sections": [
        {
            "section_title": "\t1    BTP Deployment Guide",
            "content": []
        },
        {
            "section_title": "BTP accesses",
            "content": [
                {
                    "type": "paragraph",
                    "text": "Each customer following these instructions will be allowed access to their instances which are required to deploy all our applications. "
                },
                {
                    "type": "paragraph",
                    "text": "All the following steps must be taken for a correct and functional deployment. "
                },
                {
                    "type": "paragraph",
                    "text": "If the customer does not have sufficient knowledge of working in the BTP Cockpit, it is possible to request a consultation with a developer with whom this configuration will be carried out. "
                }
            ]
        },
        {
            "section_title": "Global Account",
            "content": [
                {
                    "type": "paragraph",
                    "text": "Admin rights are granted if the customer is interested in the management of his Global and Subaccount by the developers."
                },
                {
                    "type": "paragraph",
                    "text": "ADMIN       "
                },
                {
                    "type": "paragraph",
                    "text": "only if the customer needs and wants to create and edit a sub account and the entire space."
                },
                {
                    "type": "paragraph",
                    "text": "This is how your left bar will look when you have admin rights to global account. "
                },
                {
                    "type": "paragraph",
                    "text": "VIEWER"
                },
                {
                    "type": "paragraph",
                    "text": "It is enough if the customer can prepare the environment himself, so this permission is enough for us to get to the subaccount."
                },
                {
                    "type": "paragraph",
                    "text": "This is how your left bar will look like when you have viewer rights to global account. "
                }
            ]
        },
        {
            "section_title": "Subaccounts (multi-Environment)",
            "content": [
                {
                    "type": "paragraph",
                    "text": "Here we will be interested in two main factors to set the right approaches."
                },
                {
                    "type": "paragraph",
                    "text": "Permissions are granted for the given Subaccount on which the application will be deployed (TEST/PROD)"
                },
                {
                    "type": "paragraph",
                    "text": "Security"
                },
                {
                    "type": "paragraph",
                    "text": "Cloud Foundry"
                },
                {
                    "type": "paragraph",
                    "text": "SECURITY"
                },
                {
                    "type": "paragraph",
                    "text": "When the Users tab opens, there is a Create button in the upper right corner, click on it and fill in the form where you enter the email of the developer you want to add."
                },
                {
                    "type": "paragraph",
                    "text": "in most cases the default identity provider is assigned, unless otherwise specified."
                },
                {
                    "type": "paragraph",
                    "text": "the Role Collections must also be assigned."
                },
                {
                    "type": "paragraph",
                    "text": "After creating the user, click on the row that was created with the new user."
                },
                {
                    "type": "paragraph",
                    "text": "Expand the overview of the user on the right side of the screen, click on the three dots in the Role Collections section to assign Role Collections"
                },
                {
                    "type": "paragraph",
                    "text": "When you click on the Role Collections assignment you will see a form like this where you will be given the choice to check every role that will be available"
                },
                {
                    "type": "paragraph",
                    "text": "Cloud Foundry"
                },
                {
                    "type": "paragraph",
                    "text": "In Cloud Foundry, click on the Org Members button."
                },
                {
                    "type": "paragraph",
                    "text": "Once the Org Members tab opens, the procedure is very similar to Security, there is an Add Members button in the top right corner, click on it and fill in the developer's email and you have the option to fill in the rights for the developer."
                },
                {
                    "type": "paragraph",
                    "text": "In the E-mails field fill in the email of the developer you want to add"
                },
                {
                    "type": "paragraph",
                    "text": "In Assign Org Roles we assign in most cases all the roles offered by"
                },
                {
                    "type": "paragraph",
                    "text": "Once the developers and all the Roles and Role Collections are assigned, we can click on the space where the applications will be deployed."
                },
                {
                    "type": "paragraph",
                    "text": "Click on the Add Members button."
                },
                {
                    "type": "paragraph",
                    "text": "You will see a form that you fill out very similarly to all the previous ones."
                },
                {
                    "type": "paragraph",
                    "text": "Enter the developer's email."
                },
                {
                    "type": "paragraph",
                    "text": "assign roles according to the screenshot, in most cases all."
                },
                {
                    "type": "paragraph",
                    "text": "These permissions are set for the specific space to which the application will be deployed."
                }
            ]
        },
        {
            "section_title": "1.2    Success Factors",
            "content": [
                {
                    "type": "paragraph",
                    "text": "It is necessary to enable accesses to SF for TEST/PROD, where in each instance we create API key, Certification, Private Key, copy Company key via Manage OAuth Data"
                },
                {
                    "type": "paragraph",
                    "text": "Via Manage Homepage we add a tile for the application to the main page in SF."
                },
                {
                    "type": "paragraph",
                    "text": "Access to SF either as Admin or for instances only - Manage OAuth Data and Manage Homepage"
                },
                {
                    "type": "paragraph",
                    "text": "The creation of objects for the application and import is handled by the Consultants."
                },
                {
                    "type": "paragraph",
                    "text": "More information with print screen are here Guides."
                }
            ]
        },
        {
            "section_title": "BTP instance log",
            "content": [
                {
                    "type": "paragraph",
                    "text": "If we are deploying an application for the first time, we need to make sure that we have logs set up, which then allows us to monitor the deployment process and look for possible deployment errors. "
                },
                {
                    "type": "paragraph",
                    "text": "Go to BTP to subacc to service and then to the service and instance tab and at the bottom see if any instances are already set up. If there is a login service created in the Service Application instance, we can skip this step, just make a note of the name of this service which we then enter into manifest.yaml under service. If the names did not match the logs would not be read."
                },
                {
                    "type": "image",
                    "image_path": "processed-data/images\\Document-Generator-Deployment-Guide_image_148.png"
                },
                {
                    "type": "paragraph",
                    "text": "If there is nothing in the instances, we have to create the service by clicking on create and selecting the appropriate Service \" Application logging instance\" and assign the appropriate name (we can select our own) which we will then insert into manifest.yaml and click on create , nothing else needs to be set."
                }
            ]
        },
        {
            "section_title": "Preparing the App for Deployment",
            "content": [
                {
                    "type": "paragraph",
                    "text": "The Document Generator application has 5 parts: "
                },
                {
                    "type": "paragraph",
                    "text": "DocumentGenerator-Be"
                },
                {
                    "type": "paragraph",
                    "text": "HromadneGenerovani-Fe"
                },
                {
                    "type": "paragraph",
                    "text": "Dg-configurator"
                },
                {
                    "type": "paragraph",
                    "text": "Then we need to deploy PlacehlderEngine which inserts metadata into the placeholder to DG"
                },
                {
                    "type": "paragraph",
                    "text": "Placeholderengine_v2"
                },
                {
                    "type": "paragraph",
                    "text": "Placeholderengine_v2_config"
                }
            ]
        },
        {
            "section_title": "Backend Document Generator",
            "content": [
                {
                    "type": "paragraph",
                    "text": "For the backend part of the application, the. env requisites for deploying it is the only requisite for this part. "
                },
                {
                    "type": "paragraph",
                    "text": "The deployment is projected either via manifest.yaml or bitbucket-pipelines.yml which deploys the Backend part automatically."
                },
                {
                    "type": "image",
                    "image_path": "processed-data/images\\Document-Generator-Deployment-Guide_image_168.png"
                },
                {
                    "type": "paragraph",
                    "text": "We set several things in bitbucket-pipelines:"
                },
                {
                    "type": "paragraph",
                    "text": "Cf api - The api URL is found from the customer's BTP in their subaccount."
                },
                {
                    "type": "image",
                    "image_path": "processed-data/images\\Document-Generator-Deployment-Guide_image_173.png"
                },
                {
                    "type": "paragraph",
                    "text": "Cf auth - These are the login credentials of the developer or account that has access to the required BTP"
                },
                {
                    "type": "paragraph",
                    "text": "Cf target - It is login to the global account which is via -o and to the space -s to which we will deploy the application."
                },
                {
                    "type": "paragraph",
                    "text": "org name is the acc you connect to and the space name and select which space you want to deploy to"
                },
                {
                    "type": "paragraph",
                    "text": "The other set-env settings will be detected after the application is deployed for the first time."
                },
                {
                    "type": "paragraph",
                    "text": "The $ dollar sign is used for the bitbucket and variables that store the data promoted in the respective pipelines (it is mainly used for passwords and various sensitive information so that they are not visible directly in the code)"
                },
                {
                    "type": "paragraph",
                    "text": "This is where you configure the CF login to Sf, the login to global acc and its subacc, and all the settings needed for deployment."
                },
                {
                    "type": "paragraph",
                    "text": "If we don't have pipelines set up, we can deploy via manifest.yaml in the manifest we just have to see if the application name matches and we also have to look at the name of the service log that we either created or was already created in BTP in the previous case BTP instance log"
                }
            ]
        },
        {
            "section_title": "Placeholderengine_v2 BE",
            "content": [
                {
                    "type": "paragraph",
                    "text": "This part of the backend of this application is written in Typescript and must be prepared first before deployment. "
                },
                {
                    "type": "paragraph",
                    "text": "First, we run the NPM INSTALL = NPM I command via terminal to the root directory of the placeholder to install all dependencies and node-modules for a successful build of the application"
                },
                {
                    "type": "paragraph",
                    "text": "After installing the module, we run another command NPM RUN BUILD which will take care of the rest, it will build and prepare our application after deployment, if the build goes well a dist folder will be created in the application - which is necessary for the working part of the application."
                },
                {
                    "type": "paragraph",
                    "text": "Then we just check the manifest.yaml file again so that we have the correct application name and our service log. The application name can be found in package.json."
                }
            ]
        },
        {
            "section_title": "HromadneGenerovani FrontEnd",
            "content": [
                {
                    "type": "paragraph",
                    "text": "This part of the document generator must be prepared for deployment."
                },
                {
                    "type": "paragraph",
                    "text": "In the terminal, navigate to the static directory with the command cd app and then cd static."
                },
                {
                    "type": "paragraph",
                    "text": "Here we install the node helper modules using NPM INSTALL which will then control the build of the application."
                },
                {
                    "type": "paragraph",
                    "text": "In the same directory we enter npm run build which will create the build directory where the base of our application is. "
                },
                {
                    "type": "paragraph",
                    "text": "Then we return to the app root directory using cd.. where we create a dist folder and copy the contents of the build folder we created a little while ago into this folder. This will prepare the Frontend application and the next part of the Document Generator"
                },
                {
                    "type": "paragraph",
                    "text": "manifest.yaml which then controls the deployment itself will be set up in the next chapter. The application prepared in this way will suffice for now."
                }
            ]
        },
        {
            "section_title": "DG -Config / Placeholderengine-V2-config",
            "content": [
                {
                    "type": "paragraph",
                    "text": "The config part of the file is set the same as the frontend part, the preparation and setup are the same."
                },
                {
                    "type": "paragraph",
                    "text": "In each application, we again go to the static folder using the terminal and the command cd app and cd static and, in this directory, we again first install node-modules using npm install, which allows us to build the application."
                },
                {
                    "type": "image",
                    "image_path": "processed-data/images\\Document-Generator-Deployment-Guide_image_263.png"
                },
                {
                    "type": "paragraph",
                    "text": "In the next step, again in the terminal in the same folder, enter the npm run build command to create a build application."
                },
                {
                    "type": "paragraph",
                    "text": "For DG config, which is written in React, the build will again appear in the static directory. Go to the app folder again where we create a dist file and copy everything that contains the build here."
                },
                {
                    "type": "image",
                    "image_path": "processed-data/images\\Document-Generator-Deployment-Guide_image_267.png"
                },
                {
                    "type": "paragraph",
                    "text": "For Placeholder config it behaves slightly differently, the app is in Typescript so when the build is created the dist folder is created at the same time this folder is only moved from the static folder to the app folder."
                },
                {
                    "type": "image",
                    "image_path": "processed-data/images\\Document-Generator-Deployment-Guide_image_269.png"
                }
            ]
        },
        {
            "section_title": "Logging in and setting CF.",
            "content": [
                {
                    "type": "paragraph",
                    "text": "To access CF we first need to find out the API to which the respective subaccount is connected, we can find this out from the BTP. The address is needed to connect to the space."
                },
                {
                    "type": "image",
                    "image_path": "processed-data/images\\Document-Generator-Deployment-Guide_image_272.png"
                },
                {
                    "type": "paragraph",
                    "text": "The Api address is the same in most cases, but it is good to make sure you cannot connect to the subaccount without the correct Api address."
                },
                {
                    "type": "paragraph",
                    "text": "To log in to CF you need an E-mail and password to BTP."
                },
                {
                    "type": "paragraph",
                    "text": "After connecting to the cloud foundry, you use the cf login command and then enter your email and password or cf login --sso where you click on the subcommand, and it generates a login code that you enter the terminal."
                },
                {
                    "type": "image",
                    "image_path": "processed-data/images\\Document-Generator-Deployment-Guide_image_279.png"
                },
                {
                    "type": "paragraph",
                    "text": "If you need to log into another Endpoint Api, just type cf api and copy the appropriate Endpoint."
                },
                {
                    "type": "paragraph",
                    "text": "You will only see the accounts that are assigned to a given endpoint, you will never see a list of all of them unless you are on their endpoint Api."
                }
            ]
        },
        {
            "section_title": "Preparing for deployment (deploy.yaml)",
            "content": [
                {
                    "type": "paragraph",
                    "text": "The yaml file controls the deployment of the application, adding details such as how many instances to create, how much memory the application will need and other necessary variables to make the application work."
                },
                {
                    "type": "paragraph",
                    "text": "For multi-customer deployments it is a good idea to create your own yaml file to add variables to, this will allow you to not overwrite the root file each time a new deployment is made."
                },
                {
                    "type": "paragraph",
                    "text": "When these variables are added, the information is automatically overwritten in the main file"
                },
                {
                    "type": "paragraph",
                    "text": " !! The names in the created file must match those in brackets ((API_URL)) it is case sensitive!!"
                },
                {
                    "type": "paragraph",
                    "text": "In the application in the config.js file you can make sure that you have all the necessary env. that need to be inserted or created if you miss one in the yaml file."
                }
            ]
        },
        {
            "section_title": "SF_URL",
            "content": [
                {
                    "type": "paragraph",
                    "text": "What is the SF_URL I need can be found from the SF address of the customer, after logging into SF we investigate the ulr address and from there we find out what sf url the customer uses."
                },
                {
                    "type": "paragraph",
                    "text": "It is always https:// <<datacentrum>>.eu Everything beyond this address is no longer relevant for us. "
                }
            ]
        },
        {
            "section_title": "API_URL",
            "content": [
                {
                    "type": "paragraph",
                    "text": "This address comes directly from the SF_URl on this page to find the corresponding SF_URL in the third column. "
                },
                {
                    "type": "image",
                    "image_path": "processed-data/images\\Document-Generator-Deployment-Guide_image_310.png"
                },
                {
                    "type": "paragraph",
                    "text": "When we find the appropriate address, we focus on the first column DATA CENTER where is the code designation of the address. This is necessary to find the API_URL on this page, we find the row that corresponds to our code name, and this is our API_URL."
                },
                {
                    "type": "paragraph",
                    "text": "PREVIEW is for the test instance. "
                },
                {
                    "type": "paragraph",
                    "text": "Production is for production."
                }
            ]
        },
        {
            "section_title": "ROUTE",
            "content": [
                {
                    "type": "paragraph",
                    "text": "This route is created according to the rule:"
                },
                {
                    "type": "paragraph",
                    "text": "<<application name>> - <<subdomain>>.cfapps <<api endpoint>>"
                },
                {
                    "type": "paragraph",
                    "text": "the name of the application is found in package.json or directly in manifest.yaml followed by a dash subdomain which is on the BTP of the respective subaccount followed by .cfapps and the noon part of the Api endpoint as seen in the picture"
                },
                {
                    "type": "paragraph",
                    "text": "s"
                },
                {
                    "type": "image",
                    "image_path": "processed-data/images\\Document-Generator-Deployment-Guide_image_324.png"
                },
                {
                    "type": "paragraph",
                    "text": "this way we create the application address which is created both in routes and in APP_URL"
                }
            ]
        },
        {
            "section_title": "COMPANY_ID",
            "content": [
                {
                    "type": "paragraph",
                    "text": "Company ID in some cases can be found directly in BTP from the subaccount, but in most cases you can find it either from the client itself or directly in SF when you have access."
                },
                {
                    "type": "paragraph",
                    "text": "After logging into the SF client, enter Manage Oauth2 Client Application in the search box."
                },
                {
                    "type": "paragraph",
                    "text": "Here you will see a table of applications logged in, just click on any of the view buttons."
                },
                {
                    "type": "paragraph",
                    "text": "And after clicking you will see a table where the first column shows the CompanyID we need"
                }
            ]
        },
        {
            "section_title": "CLIENT_KEY",
            "content": [
                {
                    "type": "paragraph",
                    "text": "The client key is retrieved from the same place as the Company_id again by entering it in the search box in SF Manage OAuth2 Client Application which redirects you to the next page."
                },
                {
                    "type": "paragraph",
                    "text": "Here are 2 points: "
                },
                {
                    "type": "paragraph",
                    "text": "1. we can find an already registered application by name (usually when creating it you enter the same name as the application itself, for better searching) and when we click on view we will see in the middle of the page Api Key = CLIENT KEY"
                },
                {
                    "type": "paragraph",
                    "text": "2. If the application is not yet registered here, we must first create it, click on REGISTER CLIENT APPLICATION"
                },
                {
                    "type": "paragraph",
                    "text": "Here we enter the name of the application, we can look in the manifest.yaml and copy the name."
                },
                {
                    "type": "paragraph",
                    "text": "Then enter the URL it is our created route that we did in the previous step supplemented with https:// and Certificate, usually we use the same for all applications. "
                },
                {
                    "type": "paragraph",
                    "text": "We have the certificate stored because the certificate includes the private key which is paired and without these two important things the application will not work."
                },
                {
                    "type": "paragraph",
                    "text": "When we fill everything in, we click on Register."
                },
                {
                    "type": "paragraph",
                    "text": "When we open the created and registered application via the view button, we will see a new window with our CLIENT_KEY = API_KEY in the middle."
                },
                {
                    "type": "paragraph",
                    "text": "For each part of the application, we have to create a new CLIENT_KEY the only thing that remains is always Certificates, we use the same."
                }
            ]
        },
        {
            "section_title": "DOC_GEN URL / PE_HOST",
            "content": [
                {
                    "type": "paragraph",
                    "text": "This variable specifies the URL of the backend part of the application after its first deployment. The URL is in the BTP in the given space where the application is deployed."
                },
                {
                    "type": "paragraph",
                    "text": "The address is simply copied and added to the manifest."
                }
            ]
        },
        {
            "section_title": "CERTIFICATION AND PRIVATE KEY ",
            "content": [
                {
                    "type": "paragraph",
                    "text": "These keys are necessary for the functioning of the reposted application, they must always be the same and both must be paired together, the certificate does not work without the private key and vice versa. "
                },
                {
                    "type": "paragraph",
                    "text": "If we don't have either key the key is registered as an application in Manage OAuth2 Client application in SF where we first create the keys when we create them. "
                },
                {
                    "type": "paragraph",
                    "text": "Both keys can be downloaded, after creating the Certificate you must download the private key as well because it is the only way to get it then you will never get it again and you would be forced to make a new certificate.  "
                },
                {
                    "type": "paragraph",
                    "text": "The keys are added directly to the code, in APP/SRC/VARSSL, and this opens certs/cert.pem for the certification and private/private.key for the private key. "
                },
                {
                    "type": "paragraph",
                    "text": "We always need to be careful that both keys are copied correctly otherwise the application will give us an error. It is always a good idea to check the first and last few characters of both codes."
                }
            ]
        },
        {
            "section_title": "",
            "content": []
        },
        {
            "section_title": "Deploying the application",
            "content": [
                {
                    "type": "paragraph",
                    "text": "The deployment itself is governed by 2 rules: "
                },
                {
                    "type": "paragraph",
                    "text": "1 First we deploy the BE part of the application (because we need their URL addresses to the FE part)"
                },
                {
                    "type": "paragraph",
                    "text": "2. Then we deploy the FE"
                }
            ]
        },
        {
            "section_title": "Backend Deployment",
            "content": [
                {
                    "type": "paragraph",
                    "text": "If we have prepared Pipelines, we just need to prepare in variables in bitbucket prepared data that we found here Preparing for deployment (deploy.yaml) and then add their variables names into pipeline."
                },
                {
                    "type": "paragraph",
                    "text": "we can add a new one:"
                },
                {
                    "type": "paragraph",
                    "text": "cf sent-env documentgenerator PDF_TOKEN"
                },
                {
                    "type": "paragraph",
                    "text": "new function to generate a token to better understand who is generating the document and how much. (only for DG)"
                },
                {
                    "type": "paragraph",
                    "text": "cf sent-env documentgenerator PE_HOST"
                },
                {
                    "type": "paragraph",
                    "text": "link to BE url of placeholderEngine(only for DG)"
                },
                {
                    "type": "paragraph",
                    "text": "After all the variables are completed, the process of deploying the application to the BTP is automatically started."
                },
                {
                    "type": "paragraph",
                    "text": "The same can be continued for BE placeholder setting pipelines and automatic deployment, but the additional PDF and PE_host transformations are not used here."
                },
                {
                    "type": "paragraph",
                    "text": "All these variables can then be edited and checked in BTP directly, or edited and restarted without having to re-deploy the application."
                },
                {
                    "type": "paragraph",
                    "text": "If we don't have pipelines ready, we can deploy the BE part of the application without this necessity, just log in to CF via the terminal, check manifest.yaml if the services: are correctly described and then deploy the application via the CF push command."
                },
                {
                    "type": "paragraph",
                    "text": "If everything is fine the application will go through the deployment process, if it is deployed as you see in the yaml file we don't have set env variables which we then have to enter directly in the BTP. So, when we deploy for the first time, it is assumed that at the end of the deployment the terminal will show us that the deployment failed because we have not set the variables."
                },
                {
                    "type": "paragraph",
                    "text": "We go to BTP to the subaccount and space and select the BE we have deployed."
                },
                {
                    "type": "paragraph",
                    "text": "After clicking, the application will be displayed directly, go to User_provide_variables"
                },
                {
                    "type": "image",
                    "image_path": "processed-data/images\\Document-Generator-Deployment-Guide_image_483.png"
                },
                {
                    "type": "paragraph",
                    "text": "And we will see a blank page where we have no variables, we will enter each variable we need manually. click on create variable."
                },
                {
                    "type": "paragraph",
                    "text": "And gradually we'll create all the transformations we need"
                },
                {
                    "type": "paragraph",
                    "text": "All the variables, where to find how to find or create them are in the chapter Preparing for deployment (deploy.yaml)"
                },
                {
                    "type": "paragraph",
                    "text": "List of PDF_TOKEN"
                },
                {
                    "type": "paragraph",
                    "text": "The same applies to Placeholder, but the variables do not contain PDF_TOKEN AND PE HOST"
                },
                {
                    "type": "paragraph",
                    "text": "After manually adding all variables the application in BTP must be restarted (it doesn't have to be deployed again) and after the restart when everything is set correctly BE should be ready"
                }
            ]
        },
        {
            "section_title": "FRONTEND Deployment",
            "content": [
                {
                    "type": "paragraph",
                    "text": "Deployment parts of Frontend are the last 3 parts of HromadneGenerovani, DG-Config and PlaceholderConfig."
                },
                {
                    "type": "paragraph",
                    "text": "If we have everything prepared according to this chapter Preparing the App for Deployment and the manifest.yaml correctly filled according to this chapter Preparing for deployment (deploy.yaml), supplemented by DOCGEN_URL and PE_HOST ( which we deployed first ) "
                },
                {
                    "type": "paragraph",
                    "text": "All we must do is log on to the CF in the given space and deploy all the parts one by one to the BTP."
                },
                {
                    "type": "paragraph",
                    "text": "When we have everything set up and checked, and all deployments have taken place, the green start button is lit for all applications. We can test their functionality. When we start all 3 Frontend applications, and the screen shows this:"
                },
                {
                    "type": "paragraph",
                    "text": "This means that the application is ready, and we are halfway done by this stage. The application is successfully deployed, but until the Provisioning addresses are created, we don't know if it is fully functional."
                }
            ]
        },
        {
            "section_title": "Address Configuration (Provisioning)",
            "content": [
                {
                    "type": "paragraph",
                    "text": "This step is necessary for the functioning of the application, the created addresses must be sent to the appropriate consultant who oversees the application to the customer."
                },
                {
                    "type": "paragraph",
                    "text": "Addresses are always created 3 and from each frontend. So, for DG we will send 9 https addresses which the consultant will enter SF."
                }
            ]
        },
        {
            "section_title": "creating an address",
            "content": [
                {
                    "type": "image",
                    "image_path": "processed-data/images\\Document-Generator-Deployment-Guide_image_543.png"
                },
                {
                    "type": "paragraph",
                    "text": "1- address is for login."
                },
                {
                    "type": "paragraph",
                    "text": "https:// <<ROUTE>>/api/login/<<APP_NAME>>"
                },
                {
                    "type": "paragraph",
                    "text": "2- address is for logout."
                },
                {
                    "type": "paragraph",
                    "text": "https:// <<ROUTE>>/api/logout/<<APP_NAME>>"
                },
                {
                    "type": "paragraph",
                    "text": "3 - only adress"
                },
                {
                    "type": "paragraph",
                    "text": "https:// <<ROUTE>>"
                },
                {
                    "type": "image",
                    "image_path": "processed-data/images\\Document-Generator-Deployment-Guide_image_555.png"
                },
                {
                    "type": "paragraph",
                    "text": "APP name and route can be found either in the manifest of each application or directly in the BTP of each application. So, we must create 3 addresses for Hromadnegenerovani, DG-Config and Placeholderconfig together so 9 addresses."
                },
                {
                    "type": "paragraph",
                    "text": "And send them all to the consultant, watch out for errors, if you create the wrong application, it will not register correctly."
                }
            ]
        },
        {
            "section_title": "Configurations and tests",
            "content": [
                {
                    "type": "paragraph",
                    "text": "After deploying and saving the address to provisioning, the application should start fine like here:"
                },
                {
                    "type": "image",
                    "image_path": "processed-data/images\\Document-Generator-Deployment-Guide_image_562.png"
                },
                {
                    "type": "paragraph",
                    "text": "If the application does not start and either the screen remains white or nothing is displayed, we must look for possible errors. We can look in the BTP logs which may tell us the possible error."
                },
                {
                    "type": "image",
                    "image_path": "processed-data/images\\Document-Generator-Deployment-Guide_image_565.png"
                },
                {
                    "type": "paragraph",
                    "text": "Check all the variables to see if they are entered correctly and there is no error, or if the corresponding Certificates or Private Keys match."
                },
                {
                    "type": "paragraph",
                    "text": "We can try to run the application on the guest locale unless there is a bug in the application itself or a bug in its build, we will test all functionality. If the application is running, there may be an error somewhere in the deployment or in one of the possible versions."
                },
                {
                    "type": "paragraph",
                    "text": "Or all MDF objects or Picklists that are needed for the application to work properly are not specified yet."
                }
            ]
        }
    ]
}